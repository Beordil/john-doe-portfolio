// src/components/GitHubContext.jsx
import { createContext, useContext, useEffect, useState } from "react";

// ðŸ”¹ FR : CrÃ©ation dâ€™un contexte React pour partager les donnÃ©es GitHub dans toute lâ€™app
// ðŸ”¹ EN : Create a React context to share GitHub data across the app
const GitHubCtx = createContext();

// ðŸ”¹ FR : Fournisseur du contexte GitHub (GitHubProvider)
// Il rÃ©cupÃ¨re les infos du profil GitHub via lâ€™API publique et les rend disponibles aux composants enfants.
// ðŸ”¹ EN : GitHub context provider (GitHubProvider)
// Fetches GitHub profile info from the public API and makes it available to child components.
export function GitHubProvider({ children, username = "github-johndoe" }) {
  // ðŸ”¹ FR : Ã‰tat pour stocker le profil utilisateur GitHub
  // ðŸ”¹ EN : State to store the GitHub user profile
  const [profile, setProfile] = useState(null);

  // ðŸ”¹ FR : Ã‰tat pour indiquer si le chargement est en cours
  // ðŸ”¹ EN : State to indicate if data is still loading
  const [loading, setLoading] = useState(true);

  // ðŸ”¹ FR : Ã‰tat pour stocker une Ã©ventuelle erreur
  // ðŸ”¹ EN : State to store any potential error
  const [error, setError] = useState("");

  // ðŸ”¹ FR : Hook useEffect â†’ rÃ©cupÃ¨re le profil GitHub Ã  lâ€™initialisation
  // ðŸ”¹ EN : useEffect hook â†’ fetch GitHub profile when component mounts
  useEffect(() => {
    let alive = true; // FR : SÃ©curitÃ© pour Ã©viter de modifier lâ€™Ã©tat aprÃ¨s dÃ©montage
                      // EN : Safety flag to avoid updating state after unmount

    (async () => {
      try {
        // FR : RequÃªte Ã  lâ€™API GitHub
        // EN : Fetch request to GitHub API
        const res = await fetch(`https://api.github.com/users/${username}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);

        // FR : Conversion de la rÃ©ponse en JSON
        // EN : Convert response to JSON
        const data = await res.json();

        // FR : Si le composant est encore montÃ©, on met Ã  jour lâ€™Ã©tat
        // EN : If component is still mounted, update the state
        if (alive) setProfile(data);
      } catch (e) {
        // FR : Gestion dâ€™erreur â†’ message utilisateur
        // EN : Error handling â†’ user-friendly message
        if (alive) setError("Impossible de charger le profil GitHub.");
      } finally {
        // FR : Fin du chargement
        // EN : End loading
        if (alive) setLoading(false);
      }
    })();

    // FR : Nettoyage lors du dÃ©montage du composant
    // EN : Cleanup when component unmounts
    return () => {
      alive = false;
    };
  }, [username]);

  // FR : Fournit les valeurs (profil, chargement, erreur) Ã  tous les composants enfants
  // EN : Provide (profile, loading, error) values to all child components
  return (
    <GitHubCtx.Provider value={{ profile, loading, error }}>
      {children}
    </GitHubCtx.Provider>
  );
}

// ðŸ”¹ FR : Hook personnalisÃ© pour consommer le contexte GitHub
// ðŸ”¹ EN : Custom hook to consume GitHub context
export function useGitHub() {
  return useContext(GitHubCtx);
}
